import (
	"value.um"
)

type (
	Env = struct {
		outer: ^Env
		data: map[value::Sym]value::T
	}
	T* = ^Env
)


fn (e: T) set*(s: value::Sym, v: value::T): value::T {
	e.data[s] = v
	return v
}

fn (e: T) get*(s: value::Sym): value::T {
	if validkey(e.data, s) {
		return e.data[s]
	} else if e.outer != null {
		return e.outer.get(s)
	}
	return value::Bottom{
		message: sprintf("undefined symbol '%s'", s)
	}
}

fn mk*(): T {
	return &Env{ outer: null, data: {} }
}
